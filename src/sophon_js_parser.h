typedef enum {
	T_BEGIN = 255,
	T_null,	/* 256 */
	T_true,	/* 257 */
	T_false,	/* 258 */
	T_break,	/* 259 */
	T_do,	/* 260 */
	T_in,	/* 261 */
	T_typeof,	/* 262 */
	T_case,	/* 263 */
	T_else,	/* 264 */
	T_instanceof,	/* 265 */
	T_var,	/* 266 */
	T_catch,	/* 267 */
	T_export,	/* 268 */
	T_new,	/* 269 */
	T_void,	/* 270 */
	T_class,	/* 271 */
	T_extends,	/* 272 */
	T_return,	/* 273 */
	T_while,	/* 274 */
	T_const,	/* 275 */
	T_finally,	/* 276 */
	T_super,	/* 277 */
	T_with,	/* 278 */
	T_continue,	/* 279 */
	T_for,	/* 280 */
	T_switch,	/* 281 */
	T_yield,	/* 282 */
	T_debugger,	/* 283 */
	T_function,	/* 284 */
	T_this,	/* 285 */
	T_default,	/* 286 */
	T_if,	/* 287 */
	T_throw,	/* 288 */
	T_delete,	/* 289 */
	T_import,	/* 290 */
	T_try,	/* 291 */
	T_enum,	/* 292 */
	T_await,	/* 293 */
	T_get,	/* 294 */
	T_set,	/* 295 */
	T_public,	/* 296 */
	T_interface,	/* 297 */
	T_implements,	/* 298 */
	T_SUSP,	/* 299 */
	T_LE,	/* 300 */
	T_GE,	/* 301 */
	T_EQU,	/* 302 */
	T_NEQ,	/* 303 */
	T_SAME,	/* 304 */
	T_NSAME,	/* 305 */
	T_INC,	/* 306 */
	T_DEC,	/* 307 */
	T_SHL,	/* 308 */
	T_SHR,	/* 309 */
	T_USHR,	/* 310 */
	T_AND,	/* 311 */
	T_OR,	/* 312 */
	T_ADD_ASSIGN,	/* 313 */
	T_SUB_ASSIGN,	/* 314 */
	T_MUL_ASSIGN,	/* 315 */
	T_DIV_ASSIGN,	/* 316 */
	T_MOD_ASSIGN,	/* 317 */
	T_SHL_ASSIGN,	/* 318 */
	T_SHR_ASSIGN,	/* 319 */
	T_USHR_ASSIGN,	/* 320 */
	T_BAND_ASSIGN,	/* 321 */
	T_BOR_ASSIGN,	/* 322 */
	T_XOR_ASSIGN,	/* 323 */
	T_LAMBDA,	/* 324 */
	T_NUMBER,	/* 325 */
	T_STRING,	/* 326 */
	T_REGEXP,	/* 327 */
	T_IDENTIFIER,	/* 328 */
	N_START = 329,
	N_JS,	/* 330 */
	N_PROGRAM,	/* 331 */
	N_ID_OR_EMPTY,	/* 332 */
	N_NAME,	/* 333 */
	N_PNAME,	/* 334 */
	N_MNAME,	/* 335 */
	N_FUNC_DECL,	/* 336 */
	N_STATEMENT,	/* 337 */
	N_STATEMENT_LIST,	/* 338 */
	N_EXPR_STATEMENT,	/* 339 */
	N_IF_STATEMENT,	/* 340 */
	N_FOR_STATEMENT,	/* 341 */
	N_TRY_STATEMENT,	/* 342 */
	N_BLOCK,	/* 343 */
	N_PRIMARY_EXPR,	/* 344 */
	N_EXPR,	/* 345 */
	N_EXPR_OR_EMPTY,	/* 346 */
	N_LEFT_EXPR,	/* 347 */
	N_ASSIGN_EXPR,	/* 348 */
	N_ASSIGN_EXPR_NO_IN,	/* 349 */
	N_VAR_DECL_LIST,	/* 350 */
	N_VAR_DECL,	/* 351 */
	N_VAR_DECL_LIST_NO_IN,	/* 352 */
	N_VAR_DECL_NO_IN,	/* 353 */
	N_CASE_BLOCK,	/* 354 */
	N_CASE_CLAUSES,	/* 355 */
	N_CASE_CLAUSE,	/* 356 */
	N_DEFAULT_CLAUSE,	/* 357 */
	N_CATCH,	/* 358 */
	N_FINALLY,	/* 359 */
	N_FORMAL_PARAM_LIST,	/* 360 */
	N_FORMAL_PARAM_LIST_OR_EMPTY,	/* 361 */
	N_ARRAY_LITERAL,	/* 362 */
	N_OBJECT_LITERAL,	/* 363 */
	N_ELISION,	/* 364 */
	N_ELISION_OR_EMPTY,	/* 365 */
	N_ELEMENT_LIST,	/* 366 */
	N_PROP_AND_VALUE_LIST,	/* 367 */
	N_PROP_AND_VALUE_LIST_OR_EMPTY,	/* 368 */
	N_PROP_ASSIGN,	/* 369 */
	N_PROP_NAME,	/* 370 */
	N_ALL_PROP_NAME,	/* 371 */
	N_FUNC_EXPR,	/* 372 */
	N_MEMBER_EXPR,	/* 373 */
	N_ARGUMENTS,	/* 374 */
	N_ARGUMENTS_OR_EMPTY,	/* 375 */
	N_ARGUMENT_LIST,	/* 376 */
	N_ASSIGN_OP,	/* 377 */
	N_MATH_EXPR,	/* 378 */
	N_BASE_EXPR,	/* 379 */
	N_BASE_EXPR_NO_IN,	/* 380 */
	T_END
} ParserTokenType;
typedef enum {
	R_BEGIN,
	R_COPY_0,	/* 1 */
	R_COPY_1,	/* 2 */
	R_NULL,	/* 3 */
	R_EXPR_CONST,	/* 4 */
	R_EXPR_TRUE,	/* 5 */
	R_EXPR_FALSE,	/* 6 */
	R_EXPR_NULL,	/* 7 */
	R_EXPR_ID,	/* 8 */
	R_EXPR_THIS,	/* 9 */
	R_EXPR_REGEXP,	/* 10 */
	R_GET_PROP,	/* 11 */
	R_MEMBER,	/* 12 */
	R_NEW,	/* 13 */
	R_CALL,	/* 14 */
	R_PRE_INC,	/* 15 */
	R_PRE_DEC,	/* 16 */
	R_POST_INC,	/* 17 */
	R_POST_DEC,	/* 18 */
	R_TYPEOF,	/* 19 */
	R_DELETE,	/* 20 */
	R_VOID,	/* 21 */
	R_REV,	/* 22 */
	R_POSITIVE,	/* 23 */
	R_NEG,	/* 24 */
	R_NOT,	/* 25 */
	R_ADD,	/* 26 */
	R_SUB,	/* 27 */
	R_MUL,	/* 28 */
	R_DIV,	/* 29 */
	R_MOD,	/* 30 */
	R_SHL,	/* 31 */
	R_SHR,	/* 32 */
	R_USHR,	/* 33 */
	R_LT,	/* 34 */
	R_GT,	/* 35 */
	R_LE,	/* 36 */
	R_GE,	/* 37 */
	R_EQU,	/* 38 */
	R_NEQ,	/* 39 */
	R_SAME,	/* 40 */
	R_NSAME,	/* 41 */
	R_INSTANCEOF,	/* 42 */
	R_BAND,	/* 43 */
	R_BOR,	/* 44 */
	R_XOR,	/* 45 */
	R_IN,	/* 46 */
	R_AND,	/* 47 */
	R_OR,	/* 48 */
	R_COND,	/* 49 */
	R_ASSIGN,	/* 50 */
	R_ADD_ASSIGN,	/* 51 */
	R_SUB_ASSIGN,	/* 52 */
	R_MUL_ASSIGN,	/* 53 */
	R_DIV_ASSIGN,	/* 54 */
	R_MOD_ASSIGN,	/* 55 */
	R_SHL_ASSIGN,	/* 56 */
	R_SHR_ASSIGN,	/* 57 */
	R_USHR_ASSIGN,	/* 58 */
	R_BAND_ASSIGN,	/* 59 */
	R_BOR_ASSIGN,	/* 60 */
	R_XOR_ASSIGN,	/* 61 */
	R_ASSIGN_EXPR,	/* 62 */
	R_COMMA_EXPR,	/* 63 */
	R_NO_ARGUMENT,	/* 64 */
	R_FIRST_ARGUMENT,	/* 65 */
	R_APPEND_ARGUMENT,	/* 66 */
	R_ARRAY_SET_LENGTH,	/* 67 */
	R_ARRAY_RESIZE,	/* 68 */
	R_ZERO,	/* 69 */
	R_ONE,	/* 70 */
	R_ARRAY_INC_INDEX,	/* 71 */
	R_ARRAY_FIRST_INDEX,	/* 72 */
	R_ARRAY_SET_ELEMENT,	/* 73 */
	R_OBJECT_NEW,	/* 74 */
	R_PROP,	/* 75 */
	R_PROP_GET,	/* 76 */
	R_PROP_SET,	/* 77 */
	R_PROP_GET_BEGIN,	/* 78 */
	R_PROP_SET_BEGIN,	/* 79 */
	R_EMPTY_STATEMENT,	/* 80 */
	R_EMPTY_OPS,	/* 81 */
	R_MERGE_OPS,	/* 82 */
	R_MERGE_OPS_2,	/* 83 */
	R_CONTINUE,	/* 84 */
	R_CONTINUE_LABEL,	/* 85 */
	R_BREAK,	/* 86 */
	R_BREAK_LABEL,	/* 87 */
	R_RETURN,	/* 88 */
	R_RETURN_VALUE,	/* 89 */
	R_VAR,	/* 90 */
	R_VAR_INIT,	/* 91 */
	R_EXPR_STATEMENT,	/* 92 */
	R_IF_STATEMENT,	/* 93 */
	R_IF_ELSE_STATEMENT,	/* 94 */
	R_DO_STATEMENT,	/* 95 */
	R_WHILE_STATEMENT,	/* 96 */
	R_EMPTY_EXPR,	/* 97 */
	R_FOR_LOOP_2,	/* 98 */
	R_FOR_LOOP_3,	/* 99 */
	R_FOR_LOOP_VAR,	/* 100 */
	R_FOR_IN,	/* 101 */
	R_FOR_IN_VAR,	/* 102 */
	R_THROW,	/* 103 */
	R_CATCH,	/* 104 */
	R_TRY_CATCH,	/* 105 */
	R_TRY_FINALLY,	/* 106 */
	R_TRY_CATCH_FINALLY,	/* 107 */
	R_WITH,	/* 108 */
	R_SWITCH,	/* 109 */
	R_CASE_EMPTY,	/* 110 */
	R_CASE_DEFAULT,	/* 111 */
	R_CASE_DEFAULT_CASE,	/* 112 */
	R_CASE_CLAUSES,	/* 113 */
	R_CASE_CLAUSE,	/* 114 */
	R_CASE_CLAUSE_NOOP,	/* 115 */
	R_DEFAULT_CLAUSE,	/* 116 */
	R_DEFAULT_CLAUSE_NOOP,	/* 117 */
	R_LABEL,	/* 118 */
	R_PARAM,	/* 119 */
	R_PARAM_2,	/* 120 */
	R_FUNC_BEGIN,	/* 121 */
	R_FUNC_BODY,	/* 122 */
	R_FUNC_DECL,	/* 123 */
	R_FUNC_EXPR,	/* 124 */
	R_OBJECT_BEGIN,	/* 125 */
	R_VAR_STATEMENT,	/* 126 */
	R_DEBUGGER,	/* 127 */
	R_FRAME_BEGIN,	/* 128 */
	R_KEY_TO_ID,	/* 129 */
	R_ACCEPT,	/* 130 */
	R_END
} ParserReduceType;
#define N_ERROR    0xFFF
#define N_REDUCE   0xFFE
#define T_EPSILON  0xFFFF
#define R_NONE     0xFFFFFFFF
#define RV_GET_REDUCE(r)     ((r) & 0xFFF)
#define RV_GET_TOKEN(r)      (((r) >> 12) & 0xFFF)
#define RV_GET_POP(r)        (((r) >> 24) & 0x7F)
#define RV_GET_POP_FLAG(r)   ((r) & 0x80000000)
#define TOKEN_FIELD_TABLE_BEGIN T_NUMBER
