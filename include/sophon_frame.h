/******************************************************************************
 *                SophonJS: An embedded javascript engine                     *
 *                                                                            *
 * Copyright (c) 2015 Gong Ke                                                 *
 * All rights reserved.                                                       *
 *                                                                            *
 * Redistribution and use in source and binary forms, with or without         *
 * modification, are permitted provided that the following conditions are     *
 * met:                                                                       *
 * 1.Redistributions of source code must retain the above copyright notice,   *
 * this list of conditions and the following disclaimer.                      *
 * 2.Redistributions in binary form must reproduce the above copyright        *
 * notice, this list of conditions and the following disclaimer in the        *
 * documentation and/or other materials provided with the distribution.       *
 * 3.Neither the name of the Gong Ke; nor the names of its contributors may   *
 * be used to endorse or promote products derived from this software without  *
 * specific prior written permission.                                         *
 *                                                                            *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS    *
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  *
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR     *
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR           *
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,      *
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               *
 *****************************************************************************/

#ifndef _SOPHON_FRAME_H_
#define _SOPHON_FRAME_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "sophon_types.h"
#include "sophon_value.h"
#include "sophon_gc.h"
#include "sophon_hash.h"

/**\brief Stack frame*/
struct Sophon_Frame_s {
	SOPHON_GC_HEADER
	Sophon_Frame *bottom; /**< The bottom frame*/
};

/**\brief Declaration frame*/
typedef struct {
	Sophon_Frame     frame;    /**< Base frame data*/
	Sophon_U8        argc;     /**< Arguments count*/
	Sophon_U8        varc;     /**< Variant count*/
	Sophon_U8        vbuf_size;/**< Value buffer size*/
	Sophon_Hash      var_hash; /**< Hash table of variant generated by 'eval'*/
	Sophon_Function *func;     /**< The function used this frame*/
	Sophon_Value     callerv;  /**< The caller closure value*/
	Sophon_Value     calleev;  /**< The callee closure value*/
	Sophon_Value     thisv;    /**< This value*/
	Sophon_Value     argsv;    /**< The arguments value*/
	Sophon_Value     v[1];     /**< Function arguments and variants buffer*/
} Sophon_DeclFrame;

/**\brief Global frame*/
typedef Sophon_DeclFrame Sophon_GlobalFrame;

/**\brief Named value frame*/
typedef struct {
	Sophon_Frame     frame;    /**< Base frame data*/
	Sophon_String   *name;     /**< Name of the value*/
	Sophon_Value     v;        /**< Value*/
} Sophon_NameFrame;

/**\brief With frame*/
typedef struct {
	Sophon_Frame     frame;    /**< Base frame data*/
	Sophon_Value     withv;    /**< This value*/
} Sophon_WithFrame;

/**
 * \brief Create a new declaration frame
 * \param[in] vm The current virtual machine
 * \param type Frame type
 * \param[in] callerv The caller closure value
 * \param[in] calleev The callee closure value
 * \param thisv This value
 * \param[in] argv Input arguments
 * \param argc Real arguments count
 * \return The new declaration frame
 */
extern Sophon_DeclFrame*   sophon_decl_global_frame_create (Sophon_VM *vm,
							Sophon_U8 gc_type,
							Sophon_Value callerv,
							Sophon_Value calleev,
							Sophon_Value thisv,
							Sophon_Value *argv,
							Sophon_U8 argc);

/**
 * \brief Release an unused declaration frame
 * \param[in] vm The current virtual machine
 * \param[in] frame The frame to be freed
 */
extern void                sophon_decl_frame_destroy (Sophon_VM *vm,
							Sophon_DeclFrame *frame);

/**\brief Create a new global frame*/
#define sophon_global_frame_create(vm, callerv, calleev, thisv, argv, argc)\
	sophon_decl_global_frame_create(vm, SOPHON_GC_GlobalFrame,\
				callerv, calleev, thisv, argv, argc);
/**\brief Create a new declaration frame*/
#define sophon_decl_frame_create(vm, callerv, calleev, thisv, argv, argc)\
	sophon_decl_global_frame_create(vm, SOPHON_GC_DeclFrame,\
				callerv, calleev, thisv, argv, argc);
/**\brief Release an unused global frame*/
#define sophon_global_frame_destroy sophon_decl_frame_destroy

/**
 * \brief Create a new named value frame
 * \param[in] vm The current virtual machine
 * \param name The name of the value
 * \param v The value
 * \return The new named value frame
 */
extern Sophon_NameFrame*   sophon_name_frame_create (Sophon_VM *vm,
							Sophon_String *name,
							Sophon_Value v);

/**
 * \brief Release an unused named value frame
 * \param[in] vm The current virtual machine
 * \param[in] frame The frame to be freed
 */
extern void                sophon_name_frame_destroy (Sophon_VM *vm,
							Sophon_NameFrame *frame);

/**
 * \brief Create a new with frame
 * \param[in] vm The current virtual machine
 * \param thisv This value of the with block
 * \return The new with frame
 */
extern Sophon_WithFrame*   sophon_with_frame_create (Sophon_VM *vm,
							Sophon_Value thisv);

/**
 * \brief Release an unused with frame
 * \param[in] vm The current virtual machine
 * \param[in] frame The frame to be freed
 */
extern void                sophon_with_frame_destroy (Sophon_VM *vm,
							Sophon_WithFrame *frame);

/**
 * \brief Release an unused frame
 * \param[in] vm The current virtual machine
 * \param[in] frame The frame to be freed
 */
extern void                sophon_frame_destroy (Sophon_VM *vm,
							Sophon_Frame *frame);

/**
 * \brief Add a binding to the declaration frame
 * \param[in] vm The current virtual machine
 * \param[in] frame The declaration frame
 * \param name The binding name
 * \retval SOPHON_OK On success
 * \retval SOPHON_NONE The variant has already been defined
 */
extern Sophon_Result       sophon_decl_frame_add_binding (Sophon_VM *vm,
							Sophon_DeclFrame *frame,
							Sophon_String *name);

/**
 * \brief Create arguments object
 * \param[in] vm The current virtual machine
 * \param[in] frame The declaration frame
 * \retval SOPHON_OK On success
 * \retval <0 On error
 */
extern Sophon_Result       sophon_decl_frame_create_args (Sophon_VM *vm,
							Sophon_DeclFrame *frame);


#ifdef __cplusplus
}
#endif

#endif

